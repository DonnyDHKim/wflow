

# Define the forcings needed for the sediment model here
# the filename is either the name of the pcraster map-stack or the name of the 
# variable in the netcdf input file

[inputmapstacks]
# Outputs from wflow_sbm
Precipitation		= /inmaps/P
Interception		= /inmaps/int
SurfaceRunoff = /inmaps/run
WaterLevel = /inmaps/levKin

[framework]
# outputformat for the *dynamic* mapstacks (not the states and summary maps)
# 1: pcraster
# 2: numpy
# 3: matlab

# netcdfoutput requires also outputformat = 1 (default) and additionally the name of the file
outputformat	= 1
debug		= 0
netcdfinput		= inmaps\forcing_sbm_2010.nc
netcdfoutput		= wflow_sed.nc
#netcdfstatesinput	= instates.nc
#netcdfstatesoutput	= states.nc
#netcdfstaticinput	= staticmaps.nc
#netcdfstaticoutput	= outsum.nc
netcdf_format			= NETCDF4
#netcdf_format			= NETCDF3_CLASSIC
EPSG				= EPSG:4326
netcdf_zlib			= True
netcdfwritebuffer		= 96
netcdf_least_significant_digit	= 3

[run]
# either a runinfo file or a start and end-time are required
#runinfo=run_info.xml
starttime= 2010-01-01 00:00:00 GMT
endtime= 2010-01-31 00:00:00 GMT
# required, base timestep of the model
timestepsecs = 86400
#start model with cold state
reinit=0
#runlengthdetermination	= intervals


[modelparameters]
# Format:
# name=stack,type,default
# example:
# RootingDepth=monthlyclim/ROOT,monthyclim,100,1

# - name - Name of the parameter (internal variable)
# - stack - Name of the mapstack (representation on disk or in mem) relative to case
# - type - Type of parameter (default = static)
# - default - Default value if map/tbl is not present
# - set to 1 to be verbose if a map is missing

#Possible types are::
# - staticmap: Read at startup from map 
# - statictbl: Read at startup from tbl
# - timeseries: read map for each timestep
# - monthlyclim: read a map corresponding to the current month (12 maps in total)
# - dailyclim: read a map corresponding to the current day of the year
# - hourlyclim: read a map corresponding to the current hour of the day (24 in total) (not implemented yet)

ReserVoirComplexLocs=staticmaps/wflow_reservoirlocs.map,staticmap,0.0,0
ReservoirComplexAreas=staticmaps/wflow_reservoirareas.map,staticmap,0.0,0
ResArea = intbl/ResArea.tbl,tbl,1,0,staticmaps/wflow_reservoirlocs.map

Kext	= intbl/LCtoExtinctionCoefficient.tbl,tbl,0.5,1,staticmaps/wflow_landuse.map
LAI	= staticmaps/clim/LAI,monthlyclim,1.0,1

# Model parameters and settings
[model]
modeltype= sediment
configfile = wflow_sediment.ini
intbl = intbl
# Run only the soil erosion model (0) or also the river transport model (1)
runrivermodel = 1
#Use original (0) or minimum dem (1) for river slope computation
slopecorr = 1
#USLE K computation method
#1=map ; 2=geometric mean ; 3=EPIC 
uslekmethod = 2
#USLE C computation method
#1=map ; 2=TBL based on land use
uslecmethod=2
#Rainfall erosion
#1=EUROSEM ; 2=ANSWERS
rainerodmethod = 1
#Inland sediment transport formula
#1=Yalin (particle differentiation) ; 2=Govers (total) ; 3=Yalin (total)
#If the river transport model is run, will be set to 1
landtransportmethod = 1
#River sediment transport formula for erosion threshold
#1=Engelund and Hansen ; 2=Bagnold ; 3=Kodatie ; 4=Yang ; 5=Molinas and Wu
rivtransportmethod = 2
#sCatch = 0

#Model maps from wflow_sbm
wflow_dem = staticmaps/wflow_dem.map
wflow_landuse = staticmaps/wflow_landuse.map
wflow_soil = staticmaps/wflow_soil.map
wflow_subcatch = staticmaps/wflow_subcatch.map
wflow_Hype = staticmaps/SUBID-HYPE-Rhine.map
wflow_ldd = staticmaps/wflow_ldd.map
wflow_river = staticmaps/wflow_river.map
wflow_riverwidth = staticmaps/wflow_riverwidth.map
wflow_dcl = staticmaps/DCL.map
wflow_streamorder = staticmaps/wflow_streamorder.map

#Additional model maps for wflow_sediment
wflow_clay = staticmaps/percent_clay.map
wflow_silt = staticmaps/percent_silt.map
wflow_oc = staticmaps/percent_oc.map

wflow_canopyheight = staticmaps/canopy_height.map



[misc]
#mapSaveInterval=365

[layout]
# if set to zero the cell-size is given in lat/long (the default)
sizeinmetres = 0


##################### OUTPUT INFO #####################

##### Output grids #####
[outputmaps]
#Gross precipitation [mm] (input)
#self.Precipitation=P
#Surface runoff in the kinematic wave [m^3/s]
#self.SurfaceRunoff=run
#Water level in the kinematic wave [m] (above the bottom)
#self.WaterLevel=levKin
#Overland flow [m3/s]
#self.OvRun = ovRun
#Soil loss by surface runoff erosion [ton/timestep/cell]
#self.SedOv=sedov
#Soil loss by splash erosion [ton/timestep/cell]
#self.SedSpl=sedspl
#Total soil loss [ton/timestep/cell]
self.SoilLoss=soilloss
#Total sediment input in the river per HYPE subcatchment [kg/ha/timestep]
#self.HYPEOvSedCatch = sedcatch
#Sediment from land erosion entering the river [ton]
#self.InLandSed = landsed
#Total river inputs [ton]
#self.InSedLoad = insed
#River erosion [ton]
#self.RivErodSed = erodsed
#Deposition in rivers [ton]
#self.DepSedLoad = depsed
#Sediment stored on the river bed [ton]
#self.RivStoreSed = rivstore
#Sediment output [ton]
#self.OutSedLoad = outsed
#Final sediment load in river cells [ton]
#self.SedLoad = sedload
#Total sediment concentration [mg/L]
#self.SedConc = sedconc
#Suspended sediment concentration [mg/L]
#self.SSConc = ssconc


[summary]
# Save and average these per LU type

[summary_sum]
#self.Precipitation=precip_sum.map
self.SoilLoss=soilloss_sum.map
self.SurfaceRunoff=run_sum.map

[summary_max]
#self.Precipitation=precip_max.map

[summary_min]
#self.Temperature=temp_min.map

[summary_avg]
self.SurfaceRunoff = run_avg.map

##### Output timeseries #####

[outputcsv_0]
# Save and sample these at the gauge locations
#samplemap=staticmaps/wflow_river_gauges.map
samplemap=staticmaps/wflow_river_gauges.map
self.Precipitation=prec.csv
self.SurfaceRunoff=run.csv
self.WaterLevel=lev.csv
self.SSConc = ssconc.csv 

[outputcsv_1]
# Save and average these per subcatchment
#samplemap=staticmaps/SUBID-HYPE-Rhine.map
#self.Precipitation=prec_subcatch.csv


[outputcsv_2]
# Save and average these per land use type
#samplemap=staticmaps/wflow_landuse.map
#self.PotenEvap=pet_lu.csv
#self.ActEvap=aet_lu.csv

[outputcsv_3]
# Save and sample these at the reservoir locations
#samplemap=staticmaps/wflow_ReserVoirSimpleLocs.map
#self.ReservoirVolume=ResVol.csv

[outputtss_0]
# Save and sample these at the gauge locations
#samplemap=staticmaps/wflow_river_gauges.map
#self.SurfaceRunoff=run.tss
#self.WaterLevel=lev.tss

