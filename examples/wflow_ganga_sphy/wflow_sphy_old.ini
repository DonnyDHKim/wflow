[inputmapstacks]
Prec = /inmaps/prec/prec
Tair = /inmaps/tavg/tavg
Tmax =/inmaps/tmax/tmax
Tmin =/inmaps/tmin/tmin

[run]
# either a runinfo file or a start and end-time are required
#runinfo=runinfo.xml
starttime= 1958-01-01 00:00:00 GMT
endtime= 1958-12-31 00:00:00 GMT
#starttime = None
#endtime= None
runinfo = None
# required, base timestep of the model
timestepsecs = 86400
#start model with cold state
reinit=0


# Allows you to multipla a variable/parameter of the model

#[variable_change_timestep]
#self.Precipitation = self.Precipitation * 3

#[variable_change_once]
#self.PathFrac = self.PathFrac * 1.1


# Model parameters and settings


[model]
modeltype = sphy
configfile = wflow_sphy.ini
reinit = 0
fewsrun = 0
OverWriteInit = 0
timestepsecs = 86400

[misc]
#mapSaveInterval=365

[framework]
# outputformat for the *dynamic* mapstacks (not the states and summary maps)
# 1: pcraster
# 2: numpy
# 3: matlab
outputformat=1
#netcdfoutput = outmaps.nc
#netcdfinput= inmaps.nc
#netcdfwritebuffer=100
EPSG = EPSG:7442
netcdf_format =  NETCDF3_CLASSIC
netcdf_zlib = False
netcdf_least_significant_digit = None

[layout]
# if set to zero the cell-size is given in lat/long (the default)
sizeinmetres = 1

[outputmaps]
self.QRAold=Qall
self.TotalSnowStore=SStore
self.GlacMelt=GMelt

[outputcsv_0]
samplemap = staticmaps/outlets.map
self.QRAold=Qall.csv
self.SnowRAold=QSnow.csv
self.GlacRAold=QGlac.csv
self.RainRAold=Qrain.csv
self.BaseRAold=Qbase.csv


#***********************************************************************************************
# CONFIGURATION FILE BELONGING TO SPHY. MODEL CHANGES CAN BE DONE IN THIS FILE. THIS FILE
# CAN BE USED TO CHANGE MODEL INPUT, SET PARAMETERS, MODEL OUTPUT, AND TURN ON/OFF MODULES
#
# THE SPATIAL PROCESSES IN HYDROLOGY (SPHY) MODEL IS DEVELOPED AND OWNED BY FUTUREWATER.
# AUTHOR: W. Terink
# DATE LATEST CHANGE: 16-06-2015
# VERSION 2.1
#***********************************************************************************************

#***********************************************************************************************
# SPHY enables the user to turn/off certain modules. The flags below can be used to turn on/off
# these modules (1=on, 0=off)
#***********************************************************************************************
[MODULES]

# Glacier melt processes module. This automatically turns on the snow module as well.
GlacFLAG	= 1
# Snow module. If the glacier melt processes module is turned on, then this is also turned on
# automatically. If the glacier melt processes module is turned off, then you may turn this on
# if you want to incorporate snow melt and accumulation.
SnowFLAG	= 1
# Routing module. If streamflow routing should be included, then this should be turned on. If
# this is turned on, then the reservoir module should be switched off.
RoutFLAG	= 1
# Lakes module. If lakes are located in your basin, and the Q(h)-relations are known,
# then this can be turned on to implement a more advanced routing scheme.
LakeFLAG    = 0
# Reservoirs module. This module can be used to model reservoir inflow, outflow, and storage. A
# simple or advanced reservoir operation schedule can be selected for each individual reservoir. 
# If this module is turned on, then the routing module should be switched off.
ResFLAG		= 0
# Dynamic vegetation module. This module allows to vary the crop factor (Kc) over the year. This
# can be done by using ndvi values, or by inserting a user defined kc time-series. If this
# module is not used, then the Kc will be constant for each crop.
DynVegFLAG	= 0
# Groundwater module. This distincs between the use of a groundwater reservoir or the use of a
# seepage flux (bottom boundary condition). If the groundwater module is chosen, then percolation
# will occur from the second to third (groundwater) storage, finally resulting in a baseflow flux.
# Otherwise a seepage flux leaves or enters the second storage volume, which eventually results
# in a sub drainage flux.
GroundFLAG	= 1

#***********************************************************************************************
# Define the input and output directories (with /) with respect to the working dir 
# (= dir where *.py is located)
#***********************************************************************************************
#[DIRS]

#inputdir 		= input/
#inputforcingdirT = h:/Forcing/WATCH_WFDEI_1958_2014/
#inputforcingdirP = h:/Forcing/WATCH_WFDEI_1958_2014/
#outputdir 		= output/

#***********************************************************************************************
# Define the start and end of your model simulation period (all values should be defined as 
# integers)
#***********************************************************************************************
#[TIMING]

#startyear 		= 1958
#startmonth 		= 1
#startday 		= 1
#endyear 		= 2014
#endmonth 		= 12
#endday 			= 31

#-Start date of first forcing file in directory
#startyear_F     = 1958
#startmonth_F    = 1
#startday_F      = 1

#***********************************************************************************************
# Define general input maps
#***********************************************************************************************
[GENERAL]

# CLONE MAP (boolean map with TRUE for model domain)
mask			= clone.map
# DEM (Digital Elevation Model)
dem				= dem.map
# SLOPE (scalar map with the slope (-))
Slope			= slope.map
# LOCATIONS MAP (nominal map with IDs of locations where time-series will be recorded, e.g. streamflow locations)
locations	= outlets.map

#***********************************************************************************************
# Define soil input maps
#***********************************************************************************************
[SOIL]

# FIELD CAPACITY ROOTZONE (scalar map with the field capacity of the rootzone (mm/mm)) (pF=2)
RootFieldMap 	= WCpF2_Topsoil.map
# SATURATED WATER CONTENT ROOTZONE (scalar map with the saturated water content of the rootzone (mm/mm))
RootSatMap		= WCsat_Topsoil.map
# PERMANENT WILTING POINT ROOTZONE (scalar map with permanent wilting point rootzone (mm/mm)) (pF=4.2)
RootDryMap 		= WCpF4.2_Topsoil.map
# WILTING POINT ROOTZONE (scalar map with wilting point of rootzone (mm/mm)) (pF=3)
RootWiltMap 	= WCpF3_Topsoil.map
# SATURATED HYDRAULIC CONDUCTIVITY ROOTZONE (scalar map with saturated hydraulic conductivity rootzone (mm/day))
RootKsat 		= ksat_topsoil.map
# FIELD CAPACITY SUBSOIL (scalar map with field capacity of the subsoil (mm/mm)) (pF=2)
SubFieldMap 	= WCpF2_Subsoil.map
# SATURATED WATER CONTENT SUBSOIL (scalar map with saturated water content of subsoil (mm/mm))
SubSatMap		= WCsat_Subsoil.map
# SATURATED HYDRAULIC CONDUCTIVITY SUBSOIL (scalar map with saturated hydraulic conductivity subsoil (mm/day))
SubKsat 		= ksat_subsoil.map

[SOIL_INIT]

# INITIAL ROOTWATER CONTENT (initial rootwater content (mm), if no value is supplied, 
# then RootWater=field capacity rootzone). Can be map or single value.
RootWater		= 
# INITIAL SUBSOIL WATER CONTENT (initial water content in subsoil (mm), if no value is supplied, 
# then SubWater=field capacity subsoil). Can be map or single value.
SubWater		= 
# INITIAL CAPILLARY RISE (initial capillary rise (mm). Can be map or single value.
CapRise 		= 3
# INITIAL DRAINAGE ROOTZONE (initial drainage from rootzone (mm)). Can be map or single value.
RootDrain 		= 3
# INITIAL DRAINAGE SUBSOIL (initial drainage from the subsoil (mm)). Can be map or single value.
# This can be left empty if the groundwater module is used, because then recharge to the gw will
# be calculated instead.
SubDrain		= 3

#***********************************************************************************************
# Define soil parameters
#***********************************************************************************************
[SOILPARS]

# ROOTZONE DEPTH (thickness of rootzone (mm)). Can be map or single value.
RootDepthFlat 	= 300
# SUBSOIL DEPTH (thickness of subsoil (mm)). Can be map or single value.
SubDepthFlat 	= 1000
# MAXIMUM ALLOWED CAPILLARY RISE (maximum capillary rise from subsoil to rootzone (mm/day)). Can be map
# or single value.
CapRiseMax 		= 5
# SEEPSTATIC. Flag that determines the use of a constant seepage value throughout the entire simulation
# period, or the use of a dynamic seepage map series. Use 1 for static, and 0 for dynamic. If dynamic 
# groundwater module is used, then this can be left empty.
SeepStatic		= 
# SEEPAGE (mm/d) (pos=downwards=outgoing). If groundwater module is used, then this can be left
# empty. Can be map or single value. If SeepStatic flag = 0, then a map time-series should be filled in.
SeePage			= 
# GWL_BASE. Average groundwater level through the year. Can be taken as the average of the highest
# and lowest measured groundwater level. Value should be negative (=depth in m below surface), and can be a map or
# a single value. If groundwater module is used, then this can be left empty.
GWL_base		= 

#***********************************************************************************************
# Define soil parameters for groundwater module. Can be left empty if groundwater module is not
# used
#***********************************************************************************************
[GROUNDW_PARS]

# GROUNDWATER DEPTH (thickness of groundwater layer (mm)). Can be a map or single value.
GwDepth			= 3000
# SATURATED WATER CONTENT GROUNDWATER (saturated water content in groundwater zone (mm)). Can be
# map or single value.
GwSat 			= 2000
# GROUNDWATER RECHARGE DELAY TIME (delay in groundwater recharge (days)). Can be map or single value.
deltaGw 		= 0.5
# BASEFLOW THRESHOLD (minimum value for baseflow to occur (mm)). Can be map or single value.
BaseThresh 		= 0
# BASEFLOW DAYS (parameter of baseflow days: alfaGw = 2.3/X (X = nr. of baseflow days). 
# AlfaGw ranges between 0.1-1.0). Can be map or single value.
alphaGw 		= 0.01
# SPECIFIC AQUIFER YIELD (m/m). This is the specific yield of the groundwater storage and is used for
# the groundwater table height calculation.
YieldGw			= 0.05

[GROUNDW_INIT]

# INITIAL GROUNDWATER RECHARGE (initial groundwater recharge (mm)). Can be map or single value.
GwRecharge 		= 2
# INITIAL BASEFLOW (initial baseflow (mm)). Can be map or single value.
BaseR 			= 1
# INITIAL GROUNDWATER STORAGE (initial groundwater storage (mm)). Can be map or single value.
Gw 				= 1500
# INITIAL GROUNDWATER TABLE HEIGHT (positive value (m)). This is the groundwater table in m below surface.
# This value should be higher than the total depth of the root and subzone depths, and smaller or equal
# to the total depth of the three soil layers (root+sub+gw). Can be map or single value.
H_gw			= 3

#***********************************************************************************************
# Define landuse/crop data. The DYNVEC module has only be filled in if the dynamic vegetation
# module is turned on.
#***********************************************************************************************
[LANDUSE]

# KCSTATIC. Flag that determines the use of a constant kc throughout the entire simulation period,
# or the use of a dynamic kc map series. Use 1 for static, and 0 for dynamic. If dynamic vegetation
# module is used, then this can be left empty.
KCstatic 		= 1
# LANDUSE MAP (nominal map with landuse IDs). Can be left empty if KCstatic=0 or if the dynamic vegetation
# module is used.
LandUse			= LU.map
# CROP COEFFICIENTS (lookup table with crop coefficient (-) for each landuse ID). If the dynamic
# vegetation module is used or the kcstatic value=0, then this lookup table is not required and can
# thus be left empty.
CropFac			= kc.tbl
# CROP COEFFICIENTS MAP SERIES. This one is only used if KCstatic=0 and the dynamic vegetation module
# is not used. Otherwise it can be left empty.
KC				= 


[DYNVEG]

# NDVI. Map series (define without *.map extension) with ndvi.
NDVI		=  
# NDVI Max. The maximum ndvi value. Can be a map or single value.
NDVImax		= 
# NDVI Min. The minimum ndvi value. Can be a map or single value.
NDVImin		= 
# NDVI Base. A base value for the ndvi. This value will be used if there is missing data in the ndvi
# image. Can be a map or single value.
NDVIbase	= 
# Kc max. The maximum crop factor. Can be a map or single value.
KCmax		= 
# Kc min. The maximum crop factor. Can be a map or single value.
KCmin		= 
# LAI max. The maximum LAI value. Can be a map or single value.
LAImax		= 
# FPAR max. The maximum fPAR (Fraction of Absorbed Photosynthetically Active Radiation) value. Can
# be a map or single value.
FPARmax		= 
# FPAR min. The minimum fPAR (Fraction of Absorbed Photosynthetically Active Radiation) value. Can
# be a map or single value.
FPARmin		= 

#***********************************************************************************************
# Define glacier parameters if glacier module is used. Can be left empty if glacier module is
# not used.
#***********************************************************************************************
[GLACIER]

# CLEAN ICE GLACFRAC (map with fraction of glacier fraction that is identified as clean ice 
# glacier (-)).
GlacFracCI		= glacier_clean.map
# DEBRIS GLACFRAC (map with fraction of glacier fraction that is identified as debris covered
# glacier (-)).
GlacFracDB		= glacier_debris.map
# GLACIER (clean ice) DEGREE DAY FACTOR (degree day factor for glacier (mm degree-1 day-1).
# Can be map or single value.
DDFG			= 6.1
# GLACIER DEBRIS DEGREE DAY FACTOR (degree day factor for glacier (mm degree-1 day-1).
# Can be map or single value.
DDFDG			= 2.9
# GLACIER MELT FRAC RUNOFF (fraction of glacier melt to become runoff (-)).
# Can be map or single value.
GlacF			= 0.55

[GLACIER_INIT]

# INITIAL GLACIER FRACTION MAP (initial glacier fraction (-)).
GlacFrac		= glacierfraction.map

#***********************************************************************************************
# Define snow parameters if snow module is used. This has to be filled in if the glacier
# module is used. If both snow and glacier module are not used, then this can be left empty.
#***********************************************************************************************
[SNOW]

# CRITICAL SNOW TEMPERATURE (critical temperature for precipitation to fall as snow (degrees Celsius)).
# Can be map or single value.
Tcrit 			= 1
# SNOW PACK CAPACITY (storage capacity of snow pack (mm/mm)).
# Can be map or single value.
SnowSC			= 0.5
# SNOW DEGREE DAY FACTOR (mm degree-1 day-1). Can be map or single value.
DDFS			= 4.3

[SNOW_INIT]

# INITIAL SNOW STORAGE (scalar map with initial snow storage (mm)). Can be map or single value.
SnowIni			= 0
# WATER STORAGE SNOWPACK (initial water stored in snow pack (mm)). Can be map or single value.
SnowWatStore 	= 0

#***********************************************************************************************
# Define climate forcing data for model input.
#***********************************************************************************************
[CLIMATE]

# PREC (map series (define without *.map extension) with precipitation (mm))
Prec         	= prec/prec

# TAIR (map series (define without *.map extension) with air temperature (degrees Celsius))
Tair         	= tavg/tavg

[ETREF]

# ETREF FLAG. If a map time-series exists of the reference evapotranspiration (etref), then this 
# flag can be turned on (1=Y, 0=N). If this is not used, then the etref will be calculated using
# Hargreaves.
ETREF_FLAG		= 0
# ETREF (map series (define without *.map extension) with etref (mm)). Only define if ETREF_FLAG
# = 1. Otherwise can be left empty.
ETref			= 
# LATITUDE ZONES (map with latitude zones required for calculation of extraterrestrial radiation).
# Only define if ETREF_FLAG = 0. Otherwise can be left empty.
Lat           	= Latitude.map
# SOLAR CONSTANT (MJ/m2/min). Put single float value.
Gsc 			= 0.0820
# TMIN (map series (define without *.map extension) with minimum air temperature (degrees Celsius).
# Only define if ETREF_FLAG = 0. Otherwise can be left empty.
Tmin         	= tmin/tmin
# TMAX (map series (define without *.map extension) with maximum air temperature (degrees Celsius).
# Only define if ETREF_FLAG = 0. Otherwise can be left empty.
Tmax         	= tmax/tmax


#***********************************************************************************************
# Define routing maps and parameters. This has to be filled in if the routing, lake or reservoir
# module is used.
#***********************************************************************************************
[ROUTING]

# FLOWDIR MAP (local drainage direction based on DEM)
flowdir			= ldd.map
# RECESSION ROUTING COEF (recession coefficient of routing (-)). Can be map or single value.
kx				= 0.95

#***********************************************************************************************
# Define initial routed runoff. This has to be completed if the simple routing module or the
# lake or reservoir modules are used.
#***********************************************************************************************
[ROUT_INIT]

# INITIAL ROUTED TOTAL RUNOFF (m3/s). Can be a map or a single value.
QRA_init		= 0
# FLAG FOR INITIAL ROUTED RAINFALL RUNOFF (m3/s). Can be a map or a single value. If left empty,
# then the routed rainfall rainfall runoff will not be calculated.
RainRA_init		= 0
# FLAG FOR INITIAL ROUTED BASEFLOW RUNOFF (m3/s). Can be a map or a single value. If left empty,
# then the routed rainfall rainfall runoff will not be calculated.
BaseRA_init		= 0
# FLAG FOR INITIAL ROUTED SNOW RUNOFF (m3/s). Can be a map or a single value. If left empty,
# then the routed rainfall rainfall runoff will not be calculated.
SnowRA_init		= 0
# FLAG FOR INITIAL ROUTED GLACIER RUNOFF (m3/s). Can be a map or a single value. If left empty,
# then the routed rainfall rainfall runoff will not be calculated.
GlacRA_init		= 0

#***********************************************************************************************
# Define lake maps and parameters. The LAKE module only has to be filled in if
# this module is used. Otherwise it can be left empty.
#***********************************************************************************************
[LAKE]

# LAKE ID MAP. Nominal map with a unique id number specifying each lake in the basin. Zero values for
# non-lake cells
LakeId	= 

# USE MEASURED LAKE LEVELS TO CALCULATE THE OUTFLOW (boolean map with true for lakes that have
# measured lake levels, and false for lakes that don't have lake level measurementss). For the 
# latter the level will be calculated given the h(S)-relation.
updatelakelevel	= 

# LAKE WATER LEVEL FILES (time-series (without *.001 extension) of measured lake levels (m)). 
# Should only contain values for lake locations were lake levels are measured. False (mv) for other locations.
LakeFile		= 

# LAKE STORAGE LOOKUP TABLE. Create a table file containing initial storage volumes (Mm3) for each
# lake that can be found in the LakeId map. Format should be as shown below. The first line should
# not be in the table file and the # marks should be removed:
# ID    #Stor_init [Mm3]   #RainRA_init [Mm3]   #SnowRA_init [Mm3]   #GlacRA_init [Mm3]   #BaseRA_init [Mm3]
# -99   1                 2                     3                     4                     5
# 1     value1            value2                etc                   etc                   etc
LakeStor = 

# LAKE FUNCTIONS LOOKUP TABLE. Create a table file with for each lake a function that should be
# used for the Q(h)-, S(h)-, and h(S)-relation. Format should be as shown below. The first line should
# not be in the table file and the # marks should be removed:
# ID    #qh_func (1=exp, 2=1_order poly, 3=2_order poly,4=3_order poly)   #sh_func   #hs_func
# -99   1                                                                 2          3
# 1     value1                                                            value2     etc 
LakeFunc = 

# QH-PARAMETERS LOOKUP TABLE. Create a table file with for each lake the parameters for the Q(h)-relation,
# depending on the function that should be used (as determined above). Use missing values (1e31) if the
# parameter is inappropriate for the function to be used. Format should be as shown below. The first line
# should not be in the table file and the # marks should be removed:
# ID   #exp_a   #exp_b   #pol_b   #pol_a1   #pol_a2   #pol_a3
# -99  1        2        3        4         5         6 
# 1    value1   value2   1e31     1e31      1e31      1e31
LakeQH = 

# SH-PARAMETERS LOOKUP TABLE. Create a table file with for each lake the parameters for the S(h)-relation,
# depending on the function that should be used (as determined above). Use missing values (1e31) if the
# parameter is inappropriate for the function to be used. Format should be as shown below. The first line
# should not be in the table file and the # marks should be removed:
# ID   #exp_a   #exp_b   #pol_b   #pol_a1   #pol_a2   #pol_a3
# -99  1        2        3        4         5         6 
# 1    1e31     1e31     value1   value2    1e31      1e31
LakeSH = 

# HS-PARAMETERS LOOKUP TABLE. Create a table file with for each lake the parameters for the h(S)-relation,
# depending on the function that should be used (as determined above). Use missing values (1e31) if the
# parameter is inappropriate for the function to be used. Format should be as shown below. The first line
# should not be in the table file and the # marks should be removed:
# ID   #exp_a   #exp_b   #pol_b   #pol_a1   #pol_a2   #pol_a3
# -99   1        2        3        4         5         6 
# 1     1e31     1e31     value1   value2    value3    1e31
LakeHS = 

#***********************************************************************************************
# Define reservoir maps and parameters. The RESERVOIR module only has to be filled in if
# this module is used. Otherwise it can be left empty.
#***********************************************************************************************

[RESERVOIR]

# RESERVOIR ID MAP. Nominal map with a unique id number specifying each reservoir in the basin. Zero values
# for non-reservoir cells
ResId	= 

# RESERVOIR FUNCTION AND STORAGE LOOKUP TABLE. Create a table file containing the reservoir function to be
# used (simple or advanced) and the initial storage volumes (Mm3) for each resservoir that can be found in
# the ResId map. Format should be as shown below. The first line should not be in the table file and 
# the # marks should be removed:
# ID   #Simple or advanced [1,2]   #Stor_init [Mm3]  #RainRA_init [Mm3]    #SnowRA_init [Mm3]    #GlacRA_init [Mm3]    #BaseRA_init [Mm3]
# -99  1                           2                 3                     4                     5                     6
# 1    1                           value1            value2                etc                   etc                   etc
# 6    2                           etc               etc                   etc                   etc                   etc
ResFuncStor = 

# SIMPLE RESERVOIR PARAMETERS. Create a lookup table file containing the parameters to be used for the
# reservoirs that should be modeled as simple reservoir (Hanasaki et al (2006), which are defined in 
# the table shown above. Format should be as shown below. The first line should not be in the table file and 
# the # marks should be removed:
# ID   #Kr     #Smax [Mm3]
# -99  1       2
# 1    value1  value2
# etc  etc     etc
ResSimple = 

# ADVANCED RESERVOIR PARAMETERS. Create a lookup table file containing the parameters to be used for the
# reservoirs that should be modeled as advanced reservoirs, using a target release, which are defined in 
# the table shown above. Format should be as shown below. The first line should not be in the table file and 
# the # marks should be removed:
# ID   #RES_EVOL [Mm3]   #RES_PVOL [Mm3]   #MAX_FLOW [Mm3/d]   #DEM_FLOW [Mm3/d]   #FLOOD_start [d]   #FLOOD_end [d]
# -99  1                 2                 3                   4                   5                  6
# 6    value1            value2            etc                 etc                 etc                etc
ResAdv = 

#***********************************************************************************************
# Define reporting options. SPHY provides output on a daily, monthly and annual basis. Also
# one final map is possible. Below you can modify the reporting for each output. Supply a D for daily
# output, an M for monthly, a Y for yearly, and an F if output at t=end is required. Also a 
# combination is possible, where the values should be separated by a comma; e.g. D,M or Y,D or 
# Y,M or D,M,Y. If no output is desired, then enter NONE after the =. As second parameter enter 
# the desired output file name without extension. Be careful with filename sizes since the output 
# is 8 digits before and three digits after the dot. For time-series 'F' is not an option.
#***********************************************************************************************
[REPORTING]

# FLAG FOR TIME-SERIES CALCULATION AND REPORTING OF FLUXES IN MM FOR THE UPSTREAM AREA (1=Y, 0=N).
# This is mainly interesting if routing is used as well, to check the mm of water generated from the
# upstream areas.
mm_rep_FLAG	= 0

############## WATER BALANCE (Can only select daily output) ##################################
wbal_mapoutput		   = NONE
wbal_TSoutput		   = NONE
wbal_fname			   = wbal
###############################################################################################

############## ONLY FOR LAKE AND/OR RESERVOIR MODULE ##########################################
# FLAG TO REPORT LAKE WATER BALANCE (inflow, outlfow, and storage) (1=Y, 0=N)
Lake_wbal              = 0 
# FLAG TO REPORT RESERVOIR WATER BALANCE (inflow, outlfow, and storage) (1=Y, 0=N)
Res_wbal               = 0
################################################################################################

##################### FLUXES IN MM #############################################################
# PREC
TotPrec_mapoutput	   = NONE
TotPrec_TSoutput	   = D
TotPrec_fname          = Prec
# PREC, CORRECTED FOR FRACTION
TotPrecF_mapoutput	   = NONE
TotPrecF_TSoutput	   = D
TotPrecF_fname         = PrecF
# EFFECTIVE PRECIPITATION, CORRECTED FOR FRACTION
TotPrecEF_mapoutput	   = NONE
TotPrecEF_TSoutput	   = D
TotPrecEF_fname		   = PrecEF
# INTERCEPTION, CORRECTED FOR FRACTION
TotIntF_mapoutput	   = NONE
TotIntF_TSoutput	   = NONE
TotIntF_fname		   = IntF
# RAIN
TotRain_mapoutput	   = NONE
TotRain_TSoutput	   = NONE
TotRain_fname          = Rain
# RAIN, CORRECTED FOR FRACTION
TotRainF_mapoutput	   = NONE
TotRainF_TSoutput	   = NONE
TotRainF_fname         = RainF
# ETPOT
TotETpot_mapoutput	   = NONE
TotETpot_TSoutput	   = NONE
TotETpot_fname         = ETp
# ETPOT, CORRECTED FOR FRACTION
TotETpotF_mapoutput	   = NONE
TotETpotF_TSoutput	   = NONE
TotETpotF_fname        = ETpF
# ETACT
TotETact_mapoutput	   = Y
TotETact_TSoutput	   = NONE
TotETact_fname         = ETa
# ETACT, CORRECTED FOR FRACTION
TotETactF_mapoutput	   = Y
TotETactF_TSoutput	   = NONE
TotETactF_fname        = ETaF
# SNOWFALL
TotSnow_mapoutput	   	= NONE
TotSnow_TSoutput	   	= NONE
TotSnow_fname          	= Snow
# SNOWFALL, CORRECTED FOR FRACTION
TotSnowF_mapoutput	   	= NONE
TotSnowF_TSoutput	   	= NONE
TotSnowF_fname         	= SnowF
# SNOWMELT
TotSnowMelt_mapoutput	= M
TotSnowMelt_TSoutput	= NONE
TotSnowMelt_fname       = SMel
# SNOWMELT, CORRECTED FOR FRACTION
TotSnowMeltF_mapoutput	= NONE
TotSnowMeltF_TSoutput	= NONE
TotSnowMeltF_fname      = SMelF
# GLACIER MELT
TotGlacMelt_mapoutput	= M
TotGlacMelt_TSoutput	= NONE
TotGlacMelt_fname       = GMel
# GLACIER MELT, CORRECTED FOR FRACTION
TotGlacMeltF_mapoutput	= NONE
TotGlacMeltF_TSoutput	= NONE
TotGlacMeltF_fname       = GMelF
# ROOTZONE RUNOFF, CORRECTED FOR FRACTION
TotRootRF_mapoutput		= NONE
TotRootRF_TSoutput		= NONE
TotRootRF_fname       	= Rootr
# ROOTZONE DRAINAGE, CORRECTED FOR FRACTION
TotRootDF_mapoutput	   	= NONE
TotRootDF_TSoutput 		= NONE
TotRootDF_fname        	= Rootd
# ROOTZONE PERCOLATION, CORRECTED FOR FRACTION
TotRootPF_mapoutput	   	= NONE
TotRootPF_TSoutput 		= NONE
TotRootPF_fname        	= Rootp		
# SUBZONE DRAINAGE, CORRECTED FOR FRACTION
TotSubDF_mapoutput	   	= NONE
TotSubDF_TSoutput 		= NONE
TotSubDF_fname        	= Subd
# SUBZONE PERCOLATION, CORRECTED FOR FRACTION
TotSubPF_mapoutput	   	= NONE
TotSubPF_TSoutput 		= NONE
TotSubPF_fname        	= Subp
# CAPILARY RISE, CORRECTED FOR FRACTION
TotCapRF_mapoutput		= NONE
TotCapRF_TSoutput		= NONE
TotCapRF_fname			= Capr
# SEEPAGE, CORRECTED FOR FRACTION
TotSeepF_mapoutput		= NONE
TotSeepF_TSoutput		= NONE
TotSeepF_fname			= Seep
# GLACIER PERCOLATION, CORRECTED FOR FRACTION
TotGlacPercF_mapoutput	= NONE
TotGlacPercF_TSoutput	= NONE
TotGlacPercF_fname		= Glacp
# GROUNDWATER RECHARGE, CORRECTED FOR FRACTION
TotGwRechargeF_mapoutput	= NONE
TotGwRechargeF_TSoutput		= NONE
TotGwRechargeF_fname     	= Gwre
# GROUNDWATER LEVEL in m below surface (Can only select daily output)
GWL_mapoutput			= NONE
GWL_TSoutput			= NONE
GWL_fname     			= Gwl
# RAIN RUNOFF, CORRECTED FOR FRACTION
TotRainRF_mapoutput	   	= Y
TotRainRF_TSoutput	   	= NONE
TotRainRF_fname         = Rainr
# SNOW RUNOFF, CORRECTED FOR FRACTION
TotSnowRF_mapoutput	   	= Y
TotSnowRF_TSoutput		= NONE
TotSnowRF_fname        	= Snowr
# GLACIER RUNOFF, CORRECTED FOR FRACTION
TotGlacRF_mapoutput	   	= Y
TotGlacRF_TSoutput 		= NONE
TotGlacRF_fname       	= Glacr
# BASEFLOW RUNOFF, CORRECTED FOR FRACTION
TotBaseRF_mapoutput	   	= Y
TotBaseRF_TSoutput		= NONE
TotBaseRF_fname        	= Baser
# TOTAL RUNOFF OF ALL FRACTIONS
TotRF_mapoutput	   		= Y
TotRF_TSoutput	   		= NONE
TotRF_fname          	= Totr
################### ROUTED FLUXES IN M3/S  (only D option is logical) ####################
# ROUTED RAIN RUNOFF
RainRAtot_mapoutput	   	= D
RainRAtot_TSoutput	   	= D
RainRAtot_fname         = RTot
# ROUTED SNOW RUNOFF
SnowRAtot_mapoutput	   	= M
SnowRAtot_TSoutput	   	= D
SnowRAtot_fname         = STot
# ROUTED GLACIER RUNOFF
GlacRAtot_mapoutput	   	= M
GlacRAtot_TSoutput	   	= D
GlacRAtot_fname         = GTot
# ROUTED BASEFLOW RUNOFF
BaseRAtot_mapoutput	   	= NONE
BaseRAtot_TSoutput	   	= D
BaseRAtot_fname         = BTot
# ROUTED TOTAL RUNOFF
QallRAtot_mapoutput	   	= M
QallRAtot_TSoutput	   	= D
QallRAtot_fname         = QAll
