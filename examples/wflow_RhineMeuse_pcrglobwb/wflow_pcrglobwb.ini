[framework]
# outputformat for the *dynamic* mapstacks (not the states and summary maps)
# 1: pcraster
# 2: numpy
# 3: matlab
outputformat=1
#netcdfoutput = outmaps.nc
#netcdfinput= inmaps.nc
#netcdfwritebuffer=100
#EPSG = EPSG:7442
#netcdf_format =  NETCDF3_CLASSIC
#netcdf_zlib = False
#netcdf_least_significant_digit = None


[run]
# either a runinfo file or a start and end-time are required
starttime= 2002-01-01 00:00:00
endtime= 2002-01-30 00:00:00
reinit = 0
timestepsecs = 86400
#runlengthdetermination=intervals

[model]
modeltype = wflow_pcrglobwb


[layout]
# if set to zero the cell-size is given in lat/long (the default)
sizeinmetres = 0

[outputmaps]
self.routing.subDischarge = Q
self.landSurface.storUpp000005_forest = stor

[globalOptions]

# Set the input directory map in an absolute path. 
# - The input forcing and parameter directories will be relative to this.
#inputDir = d:\Projects\CRUCIAL\VanEskedar\wflow_rhine_pcrglobwb\RhineMeuse30min\

# Map of clone (must be provided in PCRaster maps)
# - Spatial resolution and coverage are based on this map:
#~ cloneMap = CLONEMAPFILES
#cloneMap = d:\Projects\CRUCIAL\VanEskedar\wflow_rhine_pcrglobwb\RhineMeuse30min\cloneMaps/RhineMeuse30min.map

# The area/landmask of interest:
#~ landmask = LANDMASKFILES
landmask = RhineMeuse_landmask.map
# If None, area/landmask is limited for cells with ldd value. 

# Set the output directory in an absolute path.
outputDir = d:\Projects\CRUCIAL\VanEskedar\wflow_rhine_pcrglobwb\output
cleanOutputDir = False

# Output in the netcdf format will be written to (relative to outputDir):
outputNCDir = netcdf/
#
# Temporary folder (relative to outputDir):
tmpDir = tmp/
#
# The directory for the log file is generated in the following directory (relative to outputDir): 
logFileDir = log/
cleanLogDir = True

log_level_console = INFO
log_level_file = DEBUG

# The python scripts used will be also copied to the following directory (relative to outputDir): 
backupScriptDir = scripts/
debugWaterBalance = True

# netcdf attributes for output files:
institution = Department of Physical Geography, Utrecht University
title       = PCR-GLOBWB output
description = test version (by Edwin H. Sutanudjaja) 

#startTime = 2002-01-01
#endTime   = 2002-01-10
# Format: YYYY-MM-DD
#timeStep = 1.0
#timeStepUnit = day 
# PS: The current model still runs of the daily time step.

# spinning up options: 
# Note: for the purpose of DA, there should be no SpinUp 
maxSpinUpsInYears = 10
minConvForTotlSto = 0.5
minConvForSoilSto = 0.5
minConvForGwatSto = 0.5
minConvForChanSto = 0.5

# The end model states after every (spinUp or real run) cycle will be
# saved into the following directory (if defined). 
# - The directory is relative to outputDir and teh end states will be 
#   saved as PCRaster maps. 
#endStateDir = states/
#cleanEndStateDir = True

[meteoOptions]

# Set the forcing temperature and precipitation files (relative to inputDir)
#temperatureNC = d:\Projects\CRUCIAL\VanEskedar\wflow_rhine_pcrglobwb\RhineMeuse30min\forcing/temperature_2001to2010.nc
#precipitationNC = d:\Projects\CRUCIAL\VanEskedar\wflow_rhine_pcrglobwb\RhineMeuse30min\forcing/precipitation_2001to2010.nc

# Method to calculate referencePotETP (reference potential evaporation+transpiration)
referenceETPotMethod = Hamon
# options are "Hamon" and "Input" ; If "Input", the netcdf input file must be given:
refETPotFileNC = None

[meteoDownscalingOptions]

downscalePrecipitation  = None
downscaleTemperature    = None
downscaleReferenceETPot = None

# downscaling (based on the digital elevation model):
# The downscaling will be performed by providing the "cellIds" (meteoDownscaleIds) of lower resolution cells. 
meteoDownscaleIds = None
highResolutionDEM = None

# lapse rates:
temperLapseRateNC = None
precipLapseRateNC = None

# downscaling criter
temperatCorrelNC  = None
precipitCorrelNC  = None 

# windows length (unit: arc-degree) for smoothing/averaging forcing data (not recommended):
smoothingWindowsLength = 0

[landSurfaceOptions]
debugWaterBalance = True

topographyNC     = topoPropertiesRhineMeuse30min.nc
soilPropertiesNC = soilPropertiesRhineMeuse30min.nc

clappAddCoeff   = 3.0
matricSuctionFC = 1.0
matricSuction50 = 3.33
matricSuctionWP = 156.0
maxGWCapRise    = 5.0

numberOfUpperSoilLayers = 3

includeIrrigation = True
# if True, there are four land cover types defined: forest,grassland,irrPaddy,irrNonPaddy
# if False, two (natural) land cover types defined: forest,grassland

# netcdf time series for historical expansion of irrigation areas (unit: hectares). 
# Note: The resolution of this map must be consisten with the resolution of cellArea. 
historicalIrrigationArea = None

includeDomesticWaterDemand = False
includeIndustryWaterDemand = False

domesticWaterDemandFile = None
industryWaterDemandFile = None

limitAbstraction = False

# zone IDs (scale) at which water demand allocation is performed  
allocationSegmentsForGroundSurfaceWater = None

[forestOptions]
name = forest
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

landCoverMapsNC = forestPropertiesRhineMeuse.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = cropKC_forest_daily366.nc
interceptCapNC    = interceptCap_forest_daily366.nc
coverFractionNC   = coverFraction_forest_daily366.nc

# initial conditions:
interceptStorIni  = 0.0
snowCoverSWEIni   = 0.0
snowFreeWaterIni  = 0.0
topWaterLayerIni  = 0.0
storUpp000005Ini  = 0.0
storUpp005030Ini  = 0.0
storLow030150Ini  = 0.0
interflowIni      = 0.0

[grasslandOptions]
name = grassland
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

landCoverMapsNC = grasslandPropertiesRhineMeuse.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = cropKC_grassland_daily366.nc
interceptCapNC    = interceptCap_grassland_daily366.nc
coverFractionNC   = coverFraction_grassland_daily366.nc

# initial conditions:
interceptStorIni  = 0.0
snowCoverSWEIni   = 0.0
snowFreeWaterIni  = 0.0
topWaterLayerIni  = 0.0
storUpp000005Ini  = 0.0
storUpp005030Ini  = 0.0
storLow030150Ini  = 0.0
interflowIni      = 0.0

[irrPaddyOptions]
name = irrPaddy
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05
#
landCoverMapsNC = irrPaddyPropertiesRhineMeuse.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.
#
# other paramater values
minTopWaterLayer = 0.05
minCropKC        = 0.2
minInterceptCap  = 0.0002
cropDeplFactor   = 0.2

cropCoefficientNC = cropKC_irrPaddy_daily366.nc

# initial conditions:
interceptStorIni  = 0.0
snowCoverSWEIni   = 0.0
snowFreeWaterIni  = 0.0
topWaterLayerIni  = 0.0
storUpp000005Ini  = 0.0
storUpp005030Ini  = 0.0
storLow030150Ini  = 0.0
interflowIni      = 0.0

[irrNonPaddyOptions]
name = irrNonPaddy
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05
#
landCoverMapsNC  = irrNonPaddyPropertiesRhineMeuse.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.
#
# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002
cropDeplFactor   = 0.5

cropCoefficientNC = cropKC_irrNonPaddy_daily366.nc

# initial conditions:
interceptStorIni  = 0.0
snowCoverSWEIni   = 0.0
snowFreeWaterIni  = 0.0
topWaterLayerIni  = 0.0
storUpp000005Ini  = 0.0
storUpp005030Ini  = 0.0
storLow030150Ini  = 0.0
interflowIni      = 0.0


[groundwaterOptions]
debugWaterBalance = True

groundwaterPropertiesNC = groundwaterProperties.nc

#storGroundwaterIni = storGroundwaterIni_2001-12-31.map

[routingOptions]
debugWaterBalance = True

lddMap      = RhineMeuse_lddsound_30min.map
cellAreaMap = RhineMeuse_cellarea30min.map
gradient    = RhineMeuse_ChannelGradient-RVB_30min.map

# manning coefficient
manningsN   = 0.04

routingMethod = accuTravelTime
# TODO: including kinematicWave

# lake and reservoir parameters
waterBodyInputNC = waterBodiesRhineMeuse2001To2010.nc

# composite crop factors for WaterBodies: 
cropCoefficientWaterNC = cropCoefficientForOpenWaterRhineMeuse.nc

# number of days (timesteps) that have been performed for spinning up initial conditions in the routing module (i.e. channelStorageIni, avgDischargeLongIni, avgDischargeShortIni, etc.)
timestepsToAvgDischargeIni     = 0.0
# Note that: 
# - maximum number of days (timesteps) to calculate long term average flow values (default: 5 years = 5 * 365 days = 1825)
# - maximum number of days (timesteps) to calculate short term average values (default: 1 month = 1 * 30 days = 30)

# initial conditions:
channelStorageIni              = 0.0
readAvlChannelStorageIni       = 0.0
avgDischargeLongIni            = 0.0
m2tDischargeLongIni            = 0.0
avgBaseflowLongIni             = 0.0
riverbedExchangeIni            = 0.0
avgLakeReservoirInflowShortIni = 0.0
avgLakeReservoirOutflowLongIni = 0.0
#
# other initial conditions (optional):
avgDischargeShortIni           = 0.0
avgSurfaceWaterInputLongIni    = 0.0

[reportingOptions]

# output files that will be written in the disk in netcdf files:
#outDailyTotNC = discharge,satDegUpp,storUppTotal
#outMonthTotNC = precipitation,totalRunoff,totalEvaporation,interceptEvap,actBareSoilEvap,actTranspiTotal,topWaterLayerEvap,waterBodyActEvaporation,actSnowFreeWaterEvap,infiltration,gwRecharge,interflowTotal,directRunoff,baseflow,local_water_body_flux,irrGrossDemand,nonIrrGrossDemand,totalGrossDemand,nonFossilGroundWaterAbstraction,otherWaterSourceAbstraction,surfaceWaterAbstraction
#outMonthAvgNC = totalWaterStorageThickness,discharge,satDegUpp,storUppTotal,totalRunoff,totalEvaporation,interceptEvap,actBareSoilEvap,actTranspiTotal,topWaterLayerEvap,waterBodyActEvaporation,actSnowFreeWaterEvap,infiltration,gwRecharge,interflowTotal,directRunoff,baseflow,local_water_body_flux,irrGrossDemand,nonIrrGrossDemand,totalGrossDemand,nonFossilGroundWaterAbstraction,otherWaterSourceAbstraction,surfaceWaterAbstraction
#outMonthEndNC = totalWaterStorageThickness,satDegUpp,satDegLow,storUppTotal,storLowTotal,storGroundwater
#outAnnuaTotNC = precipitation,totalRunoff,totalEvaporation,interceptEvap,actBareSoilEvap,actTranspiTotal,topWaterLayerEvap,waterBodyActEvaporation,actSnowFreeWaterEvap,infiltration,gwRecharge,interflowTotal,directRunoff,baseflow,local_water_body_flux,irrGrossDemand,nonIrrGrossDemand,totalGrossDemand,nonFossilGroundWaterAbstraction,otherWaterSourceAbstraction,surfaceWaterAbstraction
#outAnnuaAvgNC = totalWaterStorageThickness,discharge,totalRunoff,totalEvaporation,interceptEvap,actBareSoilEvap,actTranspiTotal,topWaterLayerEvap,waterBodyActEvaporation,actSnowFreeWaterEvap,infiltration,gwRecharge,interflowTotal,directRunoff,baseflow,local_water_body_flux,irrGrossDemand,nonIrrGrossDemand,totalGrossDemand,nonFossilGroundWaterAbstraction,otherWaterSourceAbstraction,surfaceWaterAbstraction
#outAnnuaEndNC = totalWaterStorageThickness
